@startuml
skinparam classAttributeIconSize 0

note as N1
  All classes in client.rmi and server.rmi packages are package-private except for
  RmiConnectionServerController and RmiClientNetManager, as those are the entry-points
  of the entire packages.

  Extended interfaces in the common package are indicated with <<>> to keep the diagram
  understandable.
end note

package common {
    package common.rmi {
        interface RmiConnectionController <<Remote>> {
            void establishConnection( \n\
                String nick, \n\
                RmiLobbyUpdaterFactory updaterFactory);
        }

        RmiConnectionController --> RmiLobbyUpdaterFactory : requires
        interface RmiLobbyUpdaterFactory <<Remote>> <<LobbyUpdaterFactory>> {
            RmiLobbyUpdater create(Lobby Lobby)
        }

        RmiLobbyUpdaterFactory --> Lobby : provides
        interface Lobby {
            Property<@Nullable GameAndController> game()
        }

        Lobby --> RmiGameController : provides asyncronously
        interface RmiGameController <<Remote>> <<GameController>> {
            ... game controlling methods
            makeMoveExample(Move move);
        }

        RmiLobbyUpdaterFactory --> RmiLobbyUpdater : creates
        interface RmiLobbyUpdater <<Remote>> <<LobbyUpdater>> {
            void updateJoinedPlayers(int joinedPlayers)
            GameUpdater updateCreatedGame(GameAndController gameAndController);
        }

        RmiLobbyUpdater --> RmiGameUpdater : provides
        interface RmiGameUpdater <<Remote>> <<GameUpdater>> {
            ... methods to deliver client model updates
        }
    }
}

package server {
    class ServerController {
        + LobbyView joinGame( \n\
            String nick, \n\
            LobbyUpdaterFactory updaterFactory, \n\
            Supplier<GameController> gameControllerFactory)
    }

    class GameServerController {
        This is the actual controller
        __
        - Game game
        __
        game controlling methods
        overloaded with player instance
        + makeMoveExample(Player player, Move move);
    }

    package server.rmi {
        RmiConnectionServerController --> ServerController: delegates to
        class RmiConnectionServerController implements RmiConnectionController {
            + void establishConnection( \n\
                String nick, \n\
                RmiLobbyUpdaterFactory updaterFactory);
        }

        RmiConnectionServerController --> RmiLobbyUpdaterFactory$Stub : receives
        class RmiLobbyUpdaterFactory$Stub implements RmiLobbyUpdaterFactory {
            generated by RMI when given by the client
        }

        RmiLobbyUpdaterFactory$Stub --> RmiLobbyUpdater$Stub : asks by remote invocation
        class RmiLobbyUpdater$Stub implements RmiLobbyUpdater {
            generated by RMI when returned by the client
        }

        RmiConnectionServerController --> RmiGameServerController : provides implementation
        class RmiGameServerController implements RmiGameController {
            - Player player
            __
            ... overrides game controlling methods
        }

        RmiLobbyUpdater$Stub --> RmiGameUpdater$Stub : receives
        class RmiGameUpdater$Stub implements RmiGameUpdater {
            generated by RMI when given by the client
        }

        RmiGameServerController --> GameServerController : delegates to
    }
}

package client {

    interface ClientNetManager {
        LobbyView establishConnection(String nick);
    }

    package client.rmi {
        class RmiClientNetManager implements ClientNetManager {
            + LobbyView establishConnection(String nick);
        }

        RmiClientNetManager --> RmiLobbyClientUpdater : creates on establishConnection
        class RmiLobbyClientUpdater implements RmiLobbyUpdater {
            - Lobby lobby
            __
            ... implements methods to deliver client model updates
            + RmiGameClientUpdater updateCreatedGame(GameAndController gameAndController);
        }

        RmiLobbyClientUpdater --> RmiGameClientUpdater : creates on updateCreatedGame
        class RmiGameClientUpdater implements RmiGameUpdater {
            - Game game
            __
            ... implements methods to deliver client model updates
        }

        RmiLobbyClientUpdater --> RmiGameController$Stub : receives on updateCreatedGame
        class RmiGameController$Stub implements RmiGameController {
            generated by RMI when returned
            by RmiConnectionController$Stub
        }

        RmiClientNetManager --> RmiConnectionController$Stub : delegates to, providing RmiLobbyClientUpdaterFactory
        class RmiConnectionController$Stub implements RmiConnectionController {
            generated by RMI when binding
            __
            + void establishConnection( \n\
                String nick, \n\
                RmiLobbyUpdaterFactory updaterFactory);
        }
    }
}

'RmiConnectionController$Stub --> RmiConnectionServerController : delegates to
'RmiGameController$Stub --> RmiGameServerController : delegates to
'RmiGameUpdater$Stub --> RmiGameClientUpdater : delegates to
'RmiLobbyUpdater$Stub --> RmiLobbyClientUpdater : delegates to

@enduml